part :: Int -> Int -> [[Int]]
part 1 n = [[n]]
part n 0 = [take n [0,0..0]]
-- part m n = concat [concat $ map (\list -> [(x:list), list ++ [x]]) $ part (m - 1) (n - x) | x <- [1..n]]
part m n = concat [map (k:) (part (m - 1) (n - k)) | k <- [0..n]]


-- Copy-paste this part
assert_equal expected actual = 
    if expected == actual
    then Just True
    else Nothing

-- Adjust tests
tests = do
    test1 <- assert_equal (part 3 5) [[0,0,5],[0,1,4],[0,2,3],[0,3,2],[0,4,1],[0,5,0],[1,0,4],[1,1,3],[1,2,2],[1,3,1],[1,4,0],[2,0,3],[2,1,2],[2,2,1],[2,3,0],[3,0,2],[3,1,1],[3,2,0],[4,0,1],[4,1,0],[5,0,0]]
    test2 <- assert_equal (part 3 10) [[0,0,10],[0,1,9],[0,2,8],[0,3,7],[0,4,6],[0,5,5],[0,6,4],[0,7,3],[0,8,2],[0,9,1],[0,10,0],[1,0,9],[1,1,8],[1,2,7],[1,3,6],[1,4,5],[1,5,4],[1,6,3],[1,7,2],[1,8,1],[1,9,0],[2,0,8],[2,1,7],[2,2,6],[2,3,5],[2,4,4],[2,5,3],[2,6,2],[2,7,1],[2,8,0],[3,0,7],[3,1,6],[3,2,5],[3,3,4],[3,4,3],[3,5,2],[3,6,1],[3,7,0],[4,0,6],[4,1,5],[4,2,4],[4,3,3],[4,4,2],[4,5,1],[4,6,0],[5,0,5],[5,1,4],[5,2,3],[5,3,2],[5,4,1],[5,5,0],[6,0,4],[6,1,3],[6,2,2],[6,3,1],[6,4,0],[7,0,3],[7,1,2],[7,2,1],[7,3,0],[8,0,2],[8,1,1],[8,2,0],[9,0,1],[9,1,0],[10,0,0]]
    Just True

main = if tests == (Just True) then print "ok" else error "tests fail"
